(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{546:function(e,t,a){"use strict";a.r(t);var v=a(2),_=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("介绍MySQL的基础操作和指令。")]),e._v(" "),a("h2",{attrs:{id:"多表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表查询"}},[e._v("#")]),e._v(" 多表查询")]),e._v(" "),a("h3",{attrs:{id:"多表关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表关系"}},[e._v("#")]),e._v(" 多表关系")]),e._v(" "),a("ul",[a("li",[e._v("一对多（多对一）")]),e._v(" "),a("li",[e._v("多对多")]),e._v(" "),a("li",[e._v("一对一")])]),e._v(" "),a("h4",{attrs:{id:"一对多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一对多"}},[e._v("#")]),e._v(" 一对多")]),e._v(" "),a("p",[e._v("案例：部门与员工\n关系：一个部门对应多个员工，一个员工对应一个部门\n实现：在多的一方建立外键，指向一的一方的主键")]),e._v(" "),a("h4",{attrs:{id:"多对多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多对多"}},[e._v("#")]),e._v(" 多对多")]),e._v(" "),a("p",[e._v("案例：学生与课程\n关系：一个学生可以选多门课程，一门课程也可以供多个学生选修\n实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键")]),e._v(" "),a("h4",{attrs:{id:"一对一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一对一"}},[e._v("#")]),e._v(" 一对一")]),e._v(" "),a("p",[e._v("案例：用户与用户详情\n关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率\n实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）")]),e._v(" "),a("h3",{attrs:{id:"查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询"}},[e._v("#")]),e._v(" 查询")]),e._v(" "),a("p",[e._v("合并查询（笛卡尔积，会展示所有组合结果）：\n"),a("code",[e._v("select * from employee, dept;")])]),e._v(" "),a("blockquote",[a("p",[e._v("笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）")])]),e._v(" "),a("p",[e._v("消除无效笛卡尔积：\n"),a("code",[e._v("select * from employee, dept where employee.dept = dept.id;")])]),e._v(" "),a("h3",{attrs:{id:"内连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内连接查询"}},[e._v("#")]),e._v(" 内连接查询")]),e._v(" "),a("p",[e._v("内连接查询的是两张表交集的部分")]),e._v(" "),a("p",[e._v("隐式内连接：\n"),a("code",[e._v("SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;")])]),e._v(" "),a("p",[e._v("显式内连接：\n"),a("code",[e._v("SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;")])]),e._v(" "),a("p",[e._v("显式性能比隐式高")]),e._v(" "),a("p",[e._v("例子：")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-- 查询员工姓名，及关联的部门的名称\n-- 隐式\nselect e.name, d.name from employee as e, dept as d where e.dept = d.id;\n-- 显式\nselect e.name, d.name from employee as e inner join dept as d on e.dept = d.id;\n")])])]),a("h3",{attrs:{id:"外连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外连接查询"}},[e._v("#")]),e._v(" 外连接查询")]),e._v(" "),a("p",[e._v("左外连接：\n查询左表所有数据，以及两张表交集部分数据\n"),a("code",[e._v("SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;")]),e._v("\n相当于查询表1的所有数据，包含表1和表2交集部分数据")]),e._v(" "),a("p",[e._v("右外连接：\n查询右表所有数据，以及两张表交集部分数据\n"),a("code",[e._v("SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;")])]),e._v(" "),a("p",[e._v("例子：")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-- 左\nselect e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;\nselect d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样\n-- 右\nselect d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;\n")])])]),a("p",[e._v("左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept")]),e._v(" "),a("h3",{attrs:{id:"自连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自连接查询"}},[e._v("#")]),e._v(" 自连接查询")]),e._v(" "),a("p",[e._v("当前表与自身的连接查询，自连接必须使用表别名")]),e._v(" "),a("p",[e._v("语法：\n"),a("code",[e._v("SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;")])]),e._v(" "),a("p",[e._v("自连接查询，可以是内连接查询，也可以是外连接查询")]),e._v(" "),a("p",[e._v("例子：")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-- 查询员工及其所属领导的名字\nselect a.name, b.name from employee a, employee b where a.manager = b.id;\n-- 没有领导的也查询出来\nselect a.name, b.name from employee a left join employee b on a.manager = b.id;\n")])])]),a("h3",{attrs:{id:"联合查询-union-union-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联合查询-union-union-all"}},[e._v("#")]),e._v(" 联合查询 union, union all")]),e._v(" "),a("p",[e._v("把多次查询的结果合并，形成一个新的查询集")]),e._v(" "),a("p",[e._v("语法：")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("SELECT 字段列表 FROM 表A ...\nUNION [ALL]\nSELECT 字段列表 FROM 表B ...\n")])])]),a("h4",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[e._v("#")]),e._v(" 注意事项")]),e._v(" "),a("ul",[a("li",[e._v("UNION ALL 会有重复结果，UNION 不会")]),e._v(" "),a("li",[e._v("联合查询比使用or效率高，不会使索引失效")])]),e._v(" "),a("h3",{attrs:{id:"子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[e._v("#")]),e._v(" 子查询")]),e._v(" "),a("p",[e._v("SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。\n"),a("code",[e._v("SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);")]),e._v(" "),a("strong",[e._v("子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个")])]),e._v(" "),a("p",[e._v("根据子查询结果可以分为：")]),e._v(" "),a("ul",[a("li",[e._v("标量子查询（子查询结果为单个值）")]),e._v(" "),a("li",[e._v("列子查询（子查询结果为一列）")]),e._v(" "),a("li",[e._v("行子查询（子查询结果为一行）")]),e._v(" "),a("li",[e._v("表子查询（子查询结果为多行多列）")])]),e._v(" "),a("p",[e._v("根据子查询位置可分为：")]),e._v(" "),a("ul",[a("li",[e._v("WHERE 之后")]),e._v(" "),a("li",[e._v("FROM 之后")]),e._v(" "),a("li",[e._v("SELECT 之后")])]),e._v(" "),a("h4",{attrs:{id:"标量子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标量子查询"}},[e._v("#")]),e._v(" 标量子查询")]),e._v(" "),a("p",[e._v("子查询返回的结果是单个值（数字、字符串、日期等）。\n常用操作符：- < > > >= < <=")]),e._v(" "),a("p",[e._v("例子：")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-- 查询销售部所有员工\nselect id from dept where name = '销售部';\n-- 根据销售部部门ID，查询员工信息\nselect * from employee where dept = 4;\n-- 合并（子查询）\nselect * from employee where dept = (select id from dept where name = '销售部');\n\n-- 查询xxx入职之后的员工信息\nselect * from employee where entrydate > (select entrydate from employee where name = 'xxx');\n")])])]),a("h4",{attrs:{id:"列子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列子查询"}},[e._v("#")]),e._v(" 列子查询")]),e._v(" "),a("p",[e._v("返回的结果是一列（可以是多行）。")]),e._v(" "),a("p",[e._v("常用操作符：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("操作符")]),e._v(" "),a("th",[e._v("描述")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("IN")]),e._v(" "),a("td",[e._v("在指定的集合范围内，多选一")])]),e._v(" "),a("tr",[a("td",[e._v("NOT IN")]),e._v(" "),a("td",[e._v("不在指定的集合范围内")])]),e._v(" "),a("tr",[a("td",[e._v("ANY")]),e._v(" "),a("td",[e._v("子查询返回列表中，有任意一个满足即可")])]),e._v(" "),a("tr",[a("td",[e._v("SOME")]),e._v(" "),a("td",[e._v("与ANY等同，使用SOME的地方都可以使用ANY")])]),e._v(" "),a("tr",[a("td",[e._v("ALL")]),e._v(" "),a("td",[e._v("子查询返回列表的所有值都必须满足")])])])]),e._v(" "),a("p",[e._v("例子：")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-- 查询销售部和市场部的所有员工信息\nselect * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');\n-- 查询比财务部所有人工资都高的员工信息\nselect * from employee where salary > all(select salary from employee where dept = (select id from dept where name = '财务部'));\n-- 查询比研发部任意一人工资高的员工信息\nselect * from employee where salary > any (select salary from employee where dept = (select id from dept where name = '研发部'));\n")])])]),a("h4",{attrs:{id:"行子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行子查询"}},[e._v("#")]),e._v(" 行子查询")]),e._v(" "),a("p",[e._v("返回的结果是一行（可以是多列）。\n常用操作符：=, <, >, IN, NOT IN")]),e._v(" "),a("p",[e._v("例子：")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-- 查询与xxx的薪资及直属领导相同的员工信息\nselect * from employee where (salary, manager) = (12500, 1);\nselect * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');\n")])])]),a("h4",{attrs:{id:"表子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表子查询"}},[e._v("#")]),e._v(" 表子查询")]),e._v(" "),a("p",[e._v("返回的结果是多行多列\n常用操作符：IN")]),e._v(" "),a("p",[e._v("例子：")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-- 查询与xxx1，xxx2的职位和薪资相同的员工\nselect * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');\n-- 查询入职日期是2006-01-01之后的员工，及其部门信息\nselect e.*, d.* from (select * from employee where entrydate > '2006-01-01') as e left join dept as d on e.dept = d.id;\n")])])]),a("h2",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[e._v("#")]),e._v(" 事务")]),e._v(" "),a("p",[e._v("事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。")]),e._v(" "),a("p",[e._v("基本操作：")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-- 1. 查询张三账户余额\nselect * from account where name = '张三';\n-- 2. 将张三账户余额-1000\nupdate account set money = money - 1000 where name = '张三';\n-- 此语句出错后张三钱减少但是李四钱没有增加\n模拟sql语句错误\n-- 3. 将李四账户余额+1000\nupdate account set money = money + 1000 where name = '李四';\n\n-- 查看事务提交方式\nSELECT @@AUTOCOMMIT;\n-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效\nSET @@AUTOCOMMIT = 0;\n-- 提交事务\nCOMMIT;\n-- 回滚事务\nROLLBACK;\n\n-- 设置手动提交后上面代码改为：\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n")])])]),a("p",[e._v("操作方式二：")]),e._v(" "),a("p",[e._v("开启事务：\n"),a("code",[e._v("START TRANSACTION 或 BEGIN TRANSACTION;")]),e._v("\n提交事务：\n"),a("code",[e._v("COMMIT;")]),e._v("\n回滚事务：\n"),a("code",[e._v("ROLLBACK;")])]),e._v(" "),a("p",[e._v("操作实例：")]),e._v(" "),a("div",{staticClass:"language-mysql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("start transaction;\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n")])])]),a("h3",{attrs:{id:"四大特性acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四大特性acid"}},[e._v("#")]),e._v(" 四大特性ACID")]),e._v(" "),a("ul",[a("li",[e._v("原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败")]),e._v(" "),a("li",[e._v("一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态")]),e._v(" "),a("li",[e._v("隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行")]),e._v(" "),a("li",[e._v("持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的")])]),e._v(" "),a("h3",{attrs:{id:"并发事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发事务"}},[e._v("#")]),e._v(" 并发事务")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("问题")]),e._v(" "),a("th",[e._v("描述")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("脏读")]),e._v(" "),a("td",[e._v("一个事务读到另一个事务还没提交的数据")])]),e._v(" "),a("tr",[a("td",[e._v("不可重复读")]),e._v(" "),a("td",[e._v("一个事务先后读取同一条记录，但两次读取的数据不同")])]),e._v(" "),a("tr",[a("td",[e._v("幻读")]),e._v(" "),a("td",[e._v("一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在")])])])]),e._v(" "),a("blockquote",[a("p",[e._v("这三个问题的详细演示："),a("a",{attrs:{href:"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("并发事务隔离级别：")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("隔离级别")]),e._v(" "),a("th",[e._v("脏读")]),e._v(" "),a("th",[e._v("不可重复读")]),e._v(" "),a("th",[e._v("幻读")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("Read uncommitted")]),e._v(" "),a("td",[e._v("√")]),e._v(" "),a("td",[e._v("√")]),e._v(" "),a("td",[e._v("√")])]),e._v(" "),a("tr",[a("td",[e._v("Read committed")]),e._v(" "),a("td",[e._v("×")]),e._v(" "),a("td",[e._v("√")]),e._v(" "),a("td",[e._v("√")])]),e._v(" "),a("tr",[a("td",[e._v("Repeatable Read(默认)")]),e._v(" "),a("td",[e._v("×")]),e._v(" "),a("td",[e._v("×")]),e._v(" "),a("td",[e._v("√")])]),e._v(" "),a("tr",[a("td",[e._v("Serializable")]),e._v(" "),a("td",[e._v("×")]),e._v(" "),a("td",[e._v("×")]),e._v(" "),a("td",[e._v("×")])])])]),e._v(" "),a("ul",[a("li",[e._v("√表示在当前隔离级别下该问题会出现")]),e._v(" "),a("li",[e._v("Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差")])]),e._v(" "),a("p",[e._v("查看事务隔离级别：\n"),a("code",[e._v("SELECT @@TRANSACTION_ISOLATION;")]),e._v("\n设置事务隔离级别：\n"),a("code",[e._v("SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };")]),e._v("\nSESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效")])])}),[],!1,null,null,null);t.default=_.exports}}]);